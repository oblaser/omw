/*
author          Oliver Blaser
date            11.01.2022
copyright       MIT - Copyright (c) 2022 Oliver Blaser
*/



/*!
\defgroup grp_algorithm Algorithms Library
`#include <omw/algorithm.h>`
*/

/*!
\defgroup grp_colorLib Color Library
`#include <omw/color.h>`
*/

/*!
\defgroup grp_cli Command Line Interface Library
`#include <omw/cli.h>`

\section grp_cli_section_ansiEscWin ANSI escape on Windows
The parsing of ANSI escape sequences (VT100) has to be enabled. Depending of the result, the mode of the omw library can be set:
```
#include <iostream>

#include <omw/omw.h>
#include <omw/windows/windows.h>

using std::cout;
using std::endl;

int main()
{
#ifdef OMW_PLAT_WIN
    const bool vtEnable = omw::windows::consoleEnVirtualTermProc();
    omw::ansiesc::enable(vtEnable);
    if(!vtEnable) cout << "faild to enable virtual terminal processing" << endl;
#else // optional
    const bool vtEnable = true;
    omw::ansiesc::enable(vtEnable);
#endif

    // app code ...
    // ...
    // ...

    return 0;
}
```
See also \ref ns_omw_ansiesc_section_ansiEscMode and `omw::windows::consoleEnVirtualTermProc()`.
*/

/*!
\defgroup grp_numerics Numerics Library
`#include <omw/math.h>`
*/

/*!
\defgroup grp_stringLib String Library
`#include <omw/string.h>`
*/

// https://en.cppreference.com/w/cpp/utility
/*!
\defgroup grp_utility Utility Library
*/

/*!
\defgroup grp_macro Macros
\ingroup grp_utility
`#include <omw/defs.h>`
*/

/*!
\defgroup grp_utility_langSupport Language Support
\ingroup grp_utility

`#include <omw/utility.h>`

Classes and functions that interact closely with the language.

\section grp_utility_langSupport_section_bitShiftOp Bitwise Shift Operators

Until C++20 the left shift of negative signed values is undefined and the right shift of negative signed values is implementation-defined.
The functions `omw::shiftLeft()`, `omw::shiftRight()`, `omw::shiftLeftAssign()`, `omw::shiftRightAssign()` and the shift operators
of `omw::int128_t` and `omw::uint128_t` implement C++20 compliant shift operations.

If the number of shifts to be performed is greater than or equal to the number of bits of the values type, the result is `0`
(or `-1` if the operation was right shift of a signed type and the value was negative before the operation).

See also <a href="https://en.cppreference.com/w/cpp/language/operator_arithmetic#Bitwise_shift_operators" target="_blank">Bitwise shift operators</a> at cppreference.com.

*/

/*!
\defgroup grp_utility_langSupport_typeSupport Type Support
\ingroup grp_utility_langSupport
`#include <omw/int.h>`
*/

/*!
\defgroup grp_utility_gpUtil General Purpose Utilities
\ingroup grp_utility
`#include <omw/utility.h>`
*/

/*!
\defgroup grp_utility_gpUtil_encoding Encoding
\ingroup grp_utility_gpUtil

`#include <omw/encoding.h>`

Decode and encode byte buffers from/to several formats
*/
